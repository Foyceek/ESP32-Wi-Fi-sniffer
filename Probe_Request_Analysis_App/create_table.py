import csv
from collections import Counter

def create_probe_requests_table(csv_file):
    """
    Create probe requests table from CSV file. Much faster than parsing PCAP.
    
    Args:
        csv_file: Path to the CSV file generated by extract_probe_requests()
    
    Returns:
        tuple: (ie_summary, total_probes)
    """
    print("Creating table from CSV data")
    
    # Counter for Information Elements
    ie_counter = Counter()
    
    # Track the number of Vendor Specific IEs in each packet
    vendor_specific_counts = Counter()
    
    total_probes = 0
    
    with open(csv_file, mode='r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        for row in reader:
            total_probes += 1
            
            # Parse the IE string (format: "id1:len1,id2:len2,...")
            ie_string = row.get('IE', '')
            if not ie_string:
                continue
            
            processed_ie_ids = set()  # To avoid double counting within the same packet
            vendor_specific_count = 0  # Count of Vendor Specific IEs in this packet
            
            # Split the IE string and process each element
            for ie_element in ie_string.split(','):
                if ':' in ie_element:
                    try:
                        ie_id = int(ie_element.split(':', 1)[0])
                        
                        # Count Vendor Specific IEs (150 and 221)
                        if ie_id in (150, 221):
                            vendor_specific_count += 1
                        
                        # Count each unique IE ID once per packet
                        if ie_id not in processed_ie_ids:
                            ie_counter[ie_id] += 1
                            processed_ie_ids.add(ie_id)
                    except ValueError:
                        continue
            
            # Track the number of Vendor Specific IEs in the packet
            if vendor_specific_count > 0:
                vendor_specific_counts[vendor_specific_count] += 1
    
    # Prepare summary table data
    ie_names = {
        1: "Supported rates",
        3: "DS Parameter set",
        45: "HT Capabilities",
        50: "Extended Supported rates",
        70: "RM Enabled Capabilities",
        107: "Interworking",
        114: "Mesh ID",
        127: "Extended Capabilities",
        150: "Vendor Specific (150)",
        191: "VHT Capabilities",
        221: "Vendor Specific (221)"
    }

    # Build IE summary
    ie_summary = []
    for ie_id, name in ie_names.items():
        count = ie_counter.get(ie_id, 0)
        percentage = (count / total_probes) * 100 if total_probes > 0 else 0.0
        ie_summary.append([name, count, f"{percentage:.2f}"])

    # Add Vendor Specific counts
    vendor_specific_summary = {
        "1 Vendor Specific": vendor_specific_counts.get(1, 0),
        "2 Vendor Specific": vendor_specific_counts.get(2, 0),
        "3 Vendor Specific": vendor_specific_counts.get(3, 0),
        "4+ Vendor Specific": sum(count for num, count in vendor_specific_counts.items() if num >= 4)
    }

    for key, count in vendor_specific_summary.items():
        percentage = (count / total_probes) * 100 if total_probes > 0 else 0.0
        ie_summary.append([key, count, f"{percentage:.2f}"])

    print("Creating table finished")
    return ie_summary, total_probes